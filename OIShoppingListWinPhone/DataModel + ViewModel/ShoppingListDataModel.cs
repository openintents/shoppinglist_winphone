using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace OIShoppingListWinPhone.DataModel
{
    /// <summary>
    /// ShoppingList class for implementation database 'Lists' table and here are also added
    /// fields (not saved in DB) for organisation data binding and application work
    /// </summary>
    [Table (Name="Lists")]
    public sealed class ShoppingList: INotifyPropertyChanging, INotifyPropertyChanged
    {
        //List ID private field
        private int _listId;

        /// <summary>
        /// List ID (automatically generated by database)
        /// </summary>
        [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
        public int ListID
        {
            get { return this._listId; }
            set
            {
                if (this._listId != value)
                {
                    NotifyPropertyChanging("ListID");
                    this._listId = value;
                    NotifyPropertyChanged("ListID");
                }
            }
        }

        //List name private field
        private string _listName;

        /// <summary>
        /// List name (string with maximum length = 100)
        /// </summary>
        [Column(DbType = "NVARCHAR(100)")]
        public string ListName
        {
            get { return this._listName; }
            set
            {
                if (this._listName != value)
                {
                    NotifyPropertyChanging("ListName");
                    this._listName = value;
                    NotifyPropertyChanged("ListName");
                }
            }
        }
                
        //List created date private field
        private DateTime _createdDate;

        /// <summary>
        /// List created date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime CreatedDate
        {
            get { return this._createdDate; }
            set
            {
                if (this._createdDate != value)
                {
                    NotifyPropertyChanging("ListCreatedDate");
                    this._createdDate = value;
                    NotifyPropertyChanged("ListCreatedDate");
                }
            }
        }
                
        //List last modified date private field
        private DateTime _modifiedDate;

        /// <summary>
        /// List last modified date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime ModifiedDate
        {
            get { return this._modifiedDate; }
            set
            {
                if (this._modifiedDate != value)
                {
                    NotifyPropertyChanging("ListModifiedDate");
                    this._modifiedDate = value;
                    NotifyPropertyChanged("ListModifiedDate");
                }
            }
        }

        //List items entity set private field
        private EntitySet<ShoppingListItem> _listItems;

        /// <summary>
        /// List items entity set. List items associated with list in one-to-many relationship
        /// </summary>
        [Association(Storage = "_listItems", OtherKey = "ListID", ThisKey = "ListID", DeleteRule="CASCADE")]
        public EntitySet<ShoppingListItem> ListItems
        {
            get { return this._listItems; }
            set { _listItems.Assign(value); }
        }
        
        //List stores entity set private field
        private EntitySet<ShoppingListStore> _listStores;

        /// <summary>
        /// List stores entity set. List stores associated with list in one-to-many relationship
        /// </summary>
        [Association(Storage = "_listStores", OtherKey = "ListID", ThisKey = "ListID", DeleteRule="CASCADE")]
        public EntitySet<ShoppingListStore> ListStores
        {
            get { return this._listStores; }
            set { this._listStores.Assign(value); }
        }

        //Count of checked list items private field
        private int _checkedCount;

        /// <summary>
        /// Count of checked list items
        /// </summary>
        public int CheckedCount
        {
            get { return this._checkedCount; }
            set
            {
                if (this._checkedCount != value)
                {
                    NotifyPropertyChanging("CheckedCount");
                    this._checkedCount = value;
                    NotifyPropertyChanged("CheckedCount");
                }
            }
        }

        //Total price of checked list items private field
        private float _checkedPrice;

        /// <summary>
        /// Total price of checked list items
        /// </summary>
        public float CheckedPrice
        {
            get { return this._checkedPrice; }
            set
            {
                if (this._checkedPrice != value)
                {
                    NotifyPropertyChanging("CheckedPrice");
                    this._checkedPrice = value;
                    NotifyPropertyChanged("CheckedPrice");
                }
            }
        }

        //Total price of ALL list items private field
        private float _totalPrice;

        /// <summary>
        /// Total price of ALL list items
        /// </summary>
        public float TotalPrice
        {
            get 
            {
                //Update CheckedCount, CheckedPrice and TotalPrice with getting the property
                UpdatePrice();
                return this._totalPrice;
            }
            set
            {
                if (this._totalPrice != value)
                {
                    NotifyPropertyChanging("TotalPrice");
                    this._totalPrice = value;
                    NotifyPropertyChanged("TotalPrice");
                }
            }
        }

        /// <summary>
        /// List of unique tags of all list items
        /// </summary>
        public List<string> Tags
        {
            get
            {
                List<string> tags = new List<string>();
                foreach (ShoppingListItem item in this.ListItems)
                {
                    foreach (string tag in item.Tags)
                    {
                        if (!tags.Contains(tag))
                            tags.Add(tag);
                    }
                }
                tags.Sort();
                //Adding an '[Empty]' string to list for displaying in Custom Filter List Control
                tags.Insert(0, "[Empty]");
                return tags;
            }
        }

        /// <summary>
        /// List of unique list stores names
        /// </summary>
        public List<string> ListStoreLabels
        {
            get
            {
                List<string> stores = new List<string>();
                stores = (List<string>) from store in this._listStores
                         select store.StoreName;
                //Adding an '[Empty]' string to list for displaying in Custom Filter List Control
                stores.Insert(0, "[Empty]");
                return stores;
            }
        }

        /// <summary>
        /// Public method for updating CheckedCount, CheckedPrice and TotalPrice.
        /// This method invokes when changing list items collection, items price and item status
        /// </summary>
        public void UpdatePrice()
        {
            int chCount = 0;
            float chPrice = 0.0F; 
            float totalPrice = 0.0F; 

            foreach (ShoppingListItem item in _listItems) 
            { 
                if (item.Status == (int)ShoppingListItem.StatusEnumerator.Checked) 
                { 
                    chCount++; 
                    chPrice += item.Price; 
                } 
                totalPrice += item.Price; 
            } 

            CheckedCount = chCount; 
            CheckedPrice = chPrice; 
            TotalPrice = totalPrice;
        }

        //Constructor of ShoppingList class
        public ShoppingList()
        {
            _listItems = new EntitySet<ShoppingListItem>();
            _listStores = new EntitySet<ShoppingListStore>();

            CheckedCount = 0;
            CheckedPrice = 0.0F;
            TotalPrice = 0.0F;
        }

        #region INotifyPropertyChanging members

        //Implementation for INotifyPropertyChanging interface
        public event PropertyChangingEventHandler PropertyChanging;
        private void NotifyPropertyChanging(String propertyName)
        {
            PropertyChangingEventHandler handler = PropertyChanging;
            if (null != handler)
            {
                handler(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanged members

        //Implementation for INotifyPropertyChanged interface
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }

    
    /// <summary>
    /// ShoppingListItem class for implementation database 'Items' table and here are also added
    /// fields (not saved in DB) for organisation data binding and application work
    /// </summary>
    /// <returns></returns>
    [Table (Name="Items")]
    public sealed class ShoppingListItem: INotifyPropertyChanging, INotifyPropertyChanged
    {
        //List item ID private field
        private int _itemId;

        /// <summary>
        /// List item ID (automatically generated by database)
        /// </summary>
        [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
        public int ItemID
        {
            get { return this._itemId; }
            set
            {
                if (this._itemId != value)
                {
                    NotifyPropertyChanging("ItemID");
                    this._itemId = value;
                    NotifyPropertyChanged("ItemID");
                }
            }
        }

        //ID of corresponding list private field
        private int _listId;

        /// <summary>
        /// ID of corresponding list (where current item exist)
        /// </summary>
        [Column]
        public int ListID
        {
            get { return this._listId; }
            private set
            {
                if (this._listId != value)
                {
                    NotifyPropertyChanging("ListID");
                    this._listId = value;
                    NotifyPropertyChanged("ListID");
                }
            }
        }
                
        //Item name private field
        private string _itemName;

        /// <summary>
        /// Item name (string with maximum length = 100)
        /// </summary>
        [Column(DbType = "NVARCHAR(100)")]
        public string ItemName
        {
            get { return this._itemName; }
            set
            {
                if (this._itemName != value)
                {
                    NotifyPropertyChanging("ItemName");
                    this._itemName = value;
                    NotifyPropertyChanged("ItemName");
                }
            }
        }

        //Item status private field
        private int _status;

        /// <summary>
        /// Item status (Unchecked, Checked, Picked)
        /// </summary>
        [Column (DbType="INT")]
        public int Status
        {
            get { return this._status; }
            set
            {
                if (this._status != value)
                {
                    NotifyPropertyChanging("Status");
                    this._status = value;
                    //Updating list CheckedCount, CheckedPrice and TotalPrice fields
                    if (this.List != null)
                        this.List.UpdatePrice();
                    NotifyPropertyChanged("Status");
                }
            }
        }

        //Item status enumeration
        public enum StatusEnumerator
        {
            Unchecked,
            Checked,
            Picked
        }

        //Item price private field
        private float _price;

        /// <summary>
        /// Item price
        /// </summary>
        [Column(DbType = "FLOAT")]
        public float Price
        {
            get { return this._price; }
            set
            {
                if (this._price!= value)
                {
                    NotifyPropertyChanging("Price");
                    this._price = value;
                    //Updating list CheckedCount, CheckedPrice and TotalPrice fields
                    if (this.List != null)
                        this.List.UpdatePrice();
                    NotifyPropertyChanged("Price");
                }
            }
        }

        //Item quantity private field
        private int? _quantity;

        /// <summary>
        /// Item quantity
        /// </summary>
        [Column(DbType = "INT", CanBeNull = true)]
        public int? Quantity
        {
            get { return this._quantity; }
            set
            {
                if (this._quantity != value)
                {
                    NotifyPropertyChanging("Quantity");
                    this._quantity = value;
                    NotifyPropertyChanged("Quantity");
                }
            }
        }

        //Item units private field
        private string _units;

        /// <summary>
        /// Item units (string with maximum length = 100 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(100)")]
        public string Units
        {
            get { return this._units; }
            set
            {
                if (this._units != value)
                {
                    NotifyPropertyChanging("Units");
                    this._units = value;
                    NotifyPropertyChanged("Units");
                }
            }
        }

        //Item priority private field
        private int? _priority;

        /// <summary>
        /// Item priority
        /// </summary>
        [Column(DbType = "INT", CanBeNull = true)]
        public int? Priority
        {
            get { return this._priority; }
            set
            {
                if (this._priority != value)
                {
                    NotifyPropertyChanging("Priority");
                    this._priority = value;
                    NotifyPropertyChanged("Priority");
                }
            }
        }

        //Item tags private field
        private string _tag;

        /// <summary>
        /// Item tags (string with maximum length = 300 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(300)")]
        public string Tag
        {
            get { return this._tag; }
            set
            {
                if (this._tag != value)
                {
                    NotifyPropertyChanging("Tag");
                    this._tag = value;
                    NotifyPropertyChanged("Tag");
                }
            }
        }

        //Item note private field
        private string _note;

        /// <summary>
        /// Item note (string with maximum length = 1000 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(1000)")]
        public string Note
        {
            get { return this._note; }
            set
            {
                if (this._note != value)
                {
                    NotifyPropertyChanging("Note");
                    this._note = value;
                    NotifyPropertyChanged("Note");
                }
            }
        }
                
        //Item created date private field
        private DateTime _createdDate;

        /// <summary>
        /// Item created date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime CreatedDate
        {
            get { return this._createdDate; }
            set
            {
                if (this._createdDate != value)
                {
                    NotifyPropertyChanging("CreatedDate");
                    this._createdDate = value;
                    NotifyPropertyChanged("CreatedDate");
                }
            }
        }
                
        //Item last modified date private field
        private DateTime _modifiedDate;

        /// <summary>
        /// Item last modified date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime ModifiedDate
        {
            get { return this._modifiedDate; }
            set
            {
                if (this._modifiedDate != value)
                {
                    NotifyPropertyChanging("ModifiedDate");
                    this._modifiedDate = value;
                    NotifyPropertyChanged("ModifiedDate");
                }
            }
        }

        /// <summary>
        /// List of parsed unique item tags
        /// </summary>
        public List<string> Tags
        {
            get
            {
                List<string> tags = new List<string>();
                string[] tags_array = this.Tag.Split(',');
                foreach (string tag in tags_array)
                {
                    if(tag.Trim() != string.Empty)
                    tags.Add(tag.Trim());
                }
                return tags;
            }
        }

        //Private entity ref for corresponding list
        private EntityRef<ShoppingList> _list;

        /// <summary>
        /// Corresponding list entity ref. List items associated with list in one-to-many relationship
        /// </summary>
        [Association (Storage="_list", ThisKey="ListID", OtherKey="ListID", IsForeignKey=true, DeleteRule="CASCADE")]
        public ShoppingList List
        {
            get { return _list.Entity; }
            set
            {
                this._list.Entity = value;
                if (value != null)
                {
                    this._listId = value.ListID;
                    //Updating list CheckedCount, CheckedPrice and TotalPrice fields
                    this.List.UpdatePrice();
                }
            }
        }

        //Item-stores entity set private field
        private EntitySet<ShoppingListItemsStores> _itemsStores;

        /// <summary>
        /// Item-stores entity set. Items associated with stores in many-to-meny relationship
        /// - one store can contain zero or more list items;
        /// - one item can locate in zero or more stores.
        /// </summary>
        [Association(Storage = "_itemsStores", OtherKey = "ItemID", ThisKey = "ItemID", DeleteRule="CASCADE")]
        public EntitySet<ShoppingListItemsStores> ItemsStores
        {
            get { return this._itemsStores; }
            set { this._itemsStores.Assign(value); }
        }

        public ShoppingListItem()
        {
            _itemsStores = new EntitySet<ShoppingListItemsStores>();
        }

        #region INotifyPropertyChanging members

        //Implementation for INotifyPropertyChanging interface
        public event PropertyChangingEventHandler PropertyChanging;
        private void NotifyPropertyChanging(String propertyName)
        {
            PropertyChangingEventHandler handler = PropertyChanging;
            if (null != handler)
            {
                handler(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanged members

        //Implementation for INotifyPropertyChanged interface
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }

    
    /// <summary>
    /// ShoppingListItem class for implementation database 'Stores' table
    /// </summary>
    /// <returns></returns>
    [Table (Name="Stores")]
    public sealed class ShoppingListStore: INotifyPropertyChanging, INotifyPropertyChanged
    {
        //List store ID private field
        private int _storeId;

        /// <summary>
        /// List store ID (automatically generated by database)
        /// </summary>
        [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
        public int StoreID
        {
            get { return this._storeId; }
            set
            {
                if (this._storeId != value)
                {
                    NotifyPropertyChanging("StoreID");
                    this._storeId = value;
                    NotifyPropertyChanged("StoreID");
                }
            }
        }

        //ID of corresponding shopping list
        private int _listId;

        /// <summary>
        /// ID of corresponding shopping list
        /// </summary>
        [Column]
        public int ListID
        {
            get { return this._listId; }
            private set
            {
                if (this._listId != value)
                {
                    NotifyPropertyChanging("ListID");
                    this._listId = value;
                    NotifyPropertyChanged("ListID");
                }
            }
        }

        //Store name private field
        private string _storeName;

        /// <summary>
        /// Store name (string with maximum length = 100 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(100)")]
        public string StoreName
        {
            get { return this._storeName; }
            set
            {
                if (this._storeName != value)
                {
                    NotifyPropertyChanging("StoreName");
                    this._storeName = value;
                    NotifyPropertyChanged("StoreName");
                }
            }
        }

        //Store created date private field
        private DateTime _createdDate;

        /// <summary>
        /// Store created date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime CreatedDate
        {
            get { return this._createdDate; }
            set
            {
                if (this._createdDate != value)
                {
                    NotifyPropertyChanging("CreatedDate");
                    this._createdDate = value;
                    NotifyPropertyChanged("CreatedDate");
                }
            }
        }

        //Store last modified date private field
        private DateTime _modifiedDate;

        /// <summary>
        /// Store last modified date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime ModifiedDate
        {
            get { return this._modifiedDate; }
            set
            {
                if (this._modifiedDate != value)
                {
                    NotifyPropertyChanging("ModifiedDate");
                    this._modifiedDate = value;
                    NotifyPropertyChanged("ModifiedDate");
                }
            }
        }

        //Private entity ref for corresponding list        
        private EntityRef<ShoppingList> _list;

        //Corresponding list entity ref. List stores associated with list in one-to-many relationship
        [Association(Storage = "_list", ThisKey = "ListID", OtherKey = "ListID", IsForeignKey = true, DeleteRule="CASCADE")]
        public ShoppingList List
        {
            get { return _list.Entity; }
            set
            {
                this._list.Entity = value;
                if (value != null)
                    this._listId = value.ListID;
            }
        }

        //Store-items entity set private field
        private EntitySet<ShoppingListItemsStores> _storesItems;

        /// <summary>
        /// Store-items entity set. Stores associated with items in many-to-meny relationship
        /// - one store can contain zero or more list items;
        /// - one item can locate in zero or more stores.
        /// </summary>
        [Association(Storage = "_storesItems", OtherKey = "StoreID", ThisKey = "StoreID", DeleteRule="CASCADE")]
        public EntitySet<ShoppingListItemsStores> StoresItems
        {
            get { return this._storesItems; }
            set { this._storesItems.Assign(value); }
        }

        public ShoppingListStore()
        {
            _storesItems = new EntitySet<ShoppingListItemsStores>();
        }

        #region INotifyPropertyChanging members

        //Implementation for INotifyPropertyChanging interface
        public event PropertyChangingEventHandler PropertyChanging;
        private void NotifyPropertyChanging(String propertyName)
        {
            PropertyChangingEventHandler handler = PropertyChanging;
            if (null != handler)
            {
                handler(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanged members

        //Implementation for INotifyPropertyChanged interface
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }


    /// <summary>
    /// ShoppingListItemsStores database table class (for implementation many-to-many relationship).
    /// Each ListItem can be copied many times to ItemsStores; each ListStore can be copied many times to ItemsStores.
    /// </summary>
    /// <returns></returns>
    [Table(Name = "ItemsStores")]
    public sealed class ShoppingListItemsStores : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private int _Id;

        [Column(IsPrimaryKey = true, IsDbGenerated = true, CanBeNull = false, DbType = "INT NOT NULL Identity", AutoSync = AutoSync.OnInsert)]
        public int ID
        {
            get { return this._Id; }
            set
            {
                if (this._Id != value)
                {
                    NotifyPropertyChanging("ItemsStoresID");
                    this._Id = value;
                    NotifyPropertyChanged("ItemsStoresID");
                }
            }
        }

        private int _itemId;

        [Column]
        public int ItemID
        {
            get { return this._itemId; }
            set
            {
                if (this._itemId != value)
                {
                    NotifyPropertyChanging("ItemID");
                    this._itemId = value;
                    NotifyPropertyChanged("ItemID");
                }
            }
        }

        private int _storeId;

        [Column]
        public int StoreID
        {
            get { return this._storeId; }
            set
            {
                if (this._storeId != value)
                {
                    NotifyPropertyChanging("StoreID");
                    this._storeId = value;
                    NotifyPropertyChanged("StoreID");
                }
            }
        }

        private EntityRef<ShoppingListItem> _item;

        [Association(Name = "FK_ItemsStores_List", Storage = "_item", ThisKey = "ItemID", OtherKey = "ItemID", IsForeignKey = true, DeleteRule = "CASCADE")]
        public ShoppingListItem ListItem
        {
            get { return this._item.Entity; }
            set
            {
                this._item.Entity = value;
                if (value != null)
                    this._itemId = value.ItemID;
            }
        }
                
        private EntityRef<ShoppingListStore> _store;

        [Association(Name = "FK_StoresItems_List", Storage = "_store", ThisKey = "StoreID", OtherKey = "StoreID", IsForeignKey = true, DeleteRule = "CASCADE")]
        public ShoppingListStore Store
        {
            get { return _store.Entity; }
            set
            {
                this._store.Entity = value;
                if (value != null)
                    this._storeId = value.StoreID;
            }
        }

        #region INotifyPropertyChanging members

        //Implementation for INotifyPropertyChanging interface
        public event PropertyChangingEventHandler PropertyChanging;
        private void NotifyPropertyChanging(String propertyName)
        {
            PropertyChangingEventHandler handler = PropertyChanging;
            if (null != handler)
            {
                handler(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanged members

        //Implementation for INotifyPropertyChanged interface
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }
}
