using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Collections.ObjectModel;

using OIShoppingListWinPhone.Settings;
using OIShoppingListWinPhone.Utils;
using System.Windows.Data;

namespace OIShoppingListWinPhone.DataModel
{
    /// <summary>
    /// ShoppingList class for implementation database 'Lists' table and here are also added
    /// fields (not saved in DB) for organisation data binding and application work
    /// </summary>
    [Table(Name = "Lists")]
    public sealed class ShoppingList : INotifyPropertyChanging, INotifyPropertyChanged
    {
        //List ID private field
        private int _listId;

        /// <summary>
        /// List ID (automatically generated by database)
        /// </summary>
        [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
        public int ListID
        {
            get { return this._listId; }
            set
            {
                if (this._listId != value)
                {
                    NotifyPropertyChanging("ListID");
                    this._listId = value;
                    NotifyPropertyChanged("ListID");
                }
            }
        }

        //List name private field
        private string _listName;

        /// <summary>
        /// List name (string with maximum length = 100)
        /// </summary>
        [Column(DbType = "NVARCHAR(100)")]
        public string ListName
        {
            get { return this._listName; }
            set
            {
                if (this._listName != value)
                {
                    NotifyPropertyChanging("ListName");
                    this._listName = value;
                    NotifyPropertyChanged("ListName");
                }
            }
        }

        //List filter tag private field
        private string _filterTag = "Tag [Empty]";

        /// <summary>
        /// List filter tag (string with maximum length = 300 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(300)")]
        public string FilterTag
        {
            get { return this._filterTag; }
            set
            {
                if (this._filterTag != value)
                {
                    NotifyPropertyChanging("FilterTag");
                    this._filterTag = value;

                    //This method calls when the FilterTag changing with loading of application
                    //and when the TagsSelector ListPicker change it's selection
                    //(ShoppingList.FilterTag is binded for it as ListPicker.SelectedItem)
                    this.FilterItemsCollection();

                    NotifyPropertyChanged("FilterTag");
                }
            }
        }

        //List filter store private field
        private string _filterStore = "Store [Empty]";

        /// <summary>
        /// List filter store (string with maximum length = 300 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(300)")]
        public string FilterStore
        {
            get { return this._filterStore; }
            set
            {
                if (this._filterStore != value)
                {
                    NotifyPropertyChanging("FilterStore");
                    this._filterStore = value;
                    NotifyPropertyChanged("FilterStore");

                    //This method calls when the FilterStore changing with loading of application
                    //and when the StoreSelector ListPicker change it's selection
                    //(ShoppingList.FilterStore is binded for it as ListPicker.SelectedItem)
                    this.FilterItemsCollection();
                }
            }
        }

        //List created date private field
        private DateTime _createdDate;

        /// <summary>
        /// List created date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime CreatedDate
        {
            get { return this._createdDate; }
            set
            {
                if (this._createdDate != value)
                {
                    NotifyPropertyChanging("ListCreatedDate");
                    this._createdDate = value;
                    NotifyPropertyChanged("ListCreatedDate");
                }
            }
        }

        //List last modified date private field
        private DateTime _modifiedDate;

        /// <summary>
        /// List last modified date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime ModifiedDate
        {
            get { return this._modifiedDate; }
            set
            {
                if (this._modifiedDate != value)
                {
                    NotifyPropertyChanging("ListModifiedDate");
                    this._modifiedDate = value;
                    NotifyPropertyChanged("ListModifiedDate");
                }
            }
        }

        //List items entity set private field
        private EntitySet<ShoppingListItem> _listItems;

        /// <summary>
        /// List items entity set. List items associated with list in one-to-many relationship
        /// </summary>
        [Association(Storage = "_listItems", OtherKey = "ListID", ThisKey = "ListID", DeleteRule = "CASCADE")]
        public EntitySet<ShoppingListItem> ListItems
        {
            get { return this._listItems; }
            set
            {
                NotifyPropertyChanging("ListItems");
                _listItems.Assign(value);
                NotifyPropertyChanged("ListItems");
            }
        }

        //List stores entity set private field
        private EntitySet<ShoppingListStore> _listStores;

        /// <summary>
        /// List stores entity set. List stores associated with list in one-to-many relationship
        /// </summary>
        [Association(Storage = "_listStores", OtherKey = "ListID", ThisKey = "ListID", DeleteRule = "CASCADE")]
        public EntitySet<ShoppingListStore> ListStores
        {
            get { return this._listStores; }
            set
            {
                NotifyPropertyChanging("ListStores");
                this._listStores.Assign(value);
                NotifyPropertyChanged("ListStores");
            }
        }

        //Count of checked list items private field
        private int _checkedCount;

        /// <summary>
        /// Count of checked list items
        /// </summary>
        public int CheckedCount
        {
            get { return this._checkedCount; }
            set
            {
                if (this._checkedCount != value)
                {
                    NotifyPropertyChanging("CheckedCount");
                    this._checkedCount = value;
                    this.CheckedCountString = String.Format("#{0}", this._checkedCount);
                    NotifyPropertyChanged("CheckedCount");
                }
            }
        }

        //Formated string with count of checked list items private field
        private string _checkedCountString = string.Empty;

        /// <summary>
        /// Formated string with count of checked list items
        /// </summary>
        public string CheckedCountString
        {
            get { return this._checkedCountString; }
            set
            {
                if (this._checkedCountString != value)
                {
                    NotifyPropertyChanging("CheckedCountString");
                    this._checkedCountString = value;
                    NotifyPropertyChanged("CheckedCountString");
                }
            }
        }

        //Total price of checked list items private field
        private float _checkedPrice;

        /// <summary>
        /// Total price of checked list items
        /// </summary>
        public float CheckedPrice
        {
            get { return this._checkedPrice; }
            set
            {
                if (this._checkedPrice != value)
                {
                    NotifyPropertyChanging("CheckedPrice");
                    this._checkedPrice = value;
                    this.CheckedPriceString = String.Format("Checked: {0:F2}", this._checkedPrice);
                    NotifyPropertyChanged("CheckedPrice");
                }
            }
        }

        //Formated string with total price of checked list items private field
        private string _checkedPriceString = string.Empty;

        /// <summary>
        /// Formated string with total price of checked list items private field
        /// </summary>
        public string CheckedPriceString
        {
            get { return this._checkedPriceString; }
            set
            {
                if (this._checkedPriceString != value)
                {
                    NotifyPropertyChanging("CheckedPriceString");
                    this._checkedPriceString = value;
                    NotifyPropertyChanged("CheckedPriceString");
                }
            }
        }

        //Total price of ALL list items private field
        private float _totalPrice;

        /// <summary>
        /// Total price of ALL list items
        /// </summary>
        public float TotalPrice
        {
            get { return this._totalPrice; }
            set
            {
                if (this._totalPrice != value)
                {
                    NotifyPropertyChanging("TotalPrice");
                    this._totalPrice = value;
                    this.TotalPriceString = String.Format("Total: {0:F2}", this._totalPrice);
                    NotifyPropertyChanged("TotalPrice");
                }
            }
        }

        //Formated string with total price of checked list items private field
        private string _totalPriceString = string.Empty;

        /// <summary>
        /// Formated string with total price of checked list items private field
        /// </summary>
        public string TotalPriceString
        {
            get
            {
                //Update CheckedCount, CheckedPrice and TotalPrice
                this.UpdatePrice();
                return this._totalPriceString;
            }
            set
            {
                if (this._totalPriceString != value)
                {
                    NotifyPropertyChanging("TotalPriceString");
                    this._totalPriceString = value;
                    NotifyPropertyChanged("TotalPriceString");
                }
            }
        }

        //List unique tags of all list items private field
        private List<string> _tags;

        /// <summary>
        /// Field for indicating whether list tags of List<string> was initialised.
        /// If change this field to FALSE -> list tags of List<string> with the next GET will be initialised.
        /// </summary>
        private bool bTags = false;

        /// <summary>
        /// List of unique tags of all list items
        /// </summary>
        public List<string> Tags
        {
            get
            {
                if (!bTags)
                    //Method calls with the first Tags GET when the application is starting
                    //(when the bTags = false)
                    this.UpdateListTags();

                return this._tags;
            }
            set
            {
                NotifyPropertyChanging("Tags");
                this._tags = value;
                NotifyPropertyChanged("Tags");
            }
        }

        private List<string> _storeLabels;

        private bool bStoreLabels = false;

        /// <summary>
        /// List of unique list stores names
        /// </summary>
        public List<string> ListStoreLabels
        {
            get
            {
                if (!bStoreLabels)
                    this.UpdateListStoreLabels();
                return this._storeLabels;
            }
            set
            {
                NotifyPropertyChanging("StoreLabels");
                this._storeLabels = value;
                NotifyPropertyChanged("StoreLabels");
            }
        }

        /// <summary>
        /// Field for indicating whether items collection was filtered.
        /// If change this field to FALSE -> items collection with the next GET will be filtered
        /// </summary>
        private bool bFiltered = false;

        /// <summary>
        /// Field for indicating whether items collection was sorted.
        /// If change this field to FALSE -> items collection with the next GET will be sorted
        /// </summary>
        private bool bSorted = false;

        //Sorted/filtered items collection (using for data binding).
        //This collection creates with filtering and sorting ListItems EntitySet.
        private IEnumerable<ShoppingListItem> _sortedItemsCollection;

        /// <summary>
        /// Sorted/filtered items collection (using for data binding).
        /// This collection creates with filtering and sorting ListItems EntitySet.
        /// </summary>
        public IEnumerable<ShoppingListItem> SortedItemsCollection
        {
            get
            {
                //Filter items collection
                if (!this.bFiltered)
                    this.FilterItemsCollection();

                if (!this.bSorted)
                    this.SortItemsCollection();

                return this._sortedItemsCollection;
            }
            set
            {
                if (this._sortedItemsCollection != value)
                {
                    NotifyPropertyChanging("SortedItemsCollection");
                    this._sortedItemsCollection = value;
                    NotifyPropertyChanged("SortedItemsCollection");
                }
            }
        }

        /// <summary>
        /// Public method for updating CheckedCount, CheckedPrice and TotalPrice.
        /// This method invokes when changing list items collection, items price and item status
        /// </summary>
        public void UpdatePrice()
        {
            int chCount = 0;
            float chPrice = 0.0F;
            float totalPrice = 0.0F;

            foreach (ShoppingListItem item in _listItems)
            {
                if (item.Status == 1)
                {
                    chCount++;
                    chPrice += item.Price;
                }
                totalPrice += item.Price;
            }

            CheckedCount = chCount;
            CheckedPrice = chPrice;
            TotalPrice = totalPrice;
        }

        /// <summary>
        /// Updating ShoppingList.Tags property. 
        /// Calls when the ShoppingList.ListItems collection was changed and 
        /// it's necessary to update list of unique list tags
        /// </summary>
        public void UpdateListTags()
        {
            List<string> tags = new List<string>();
            //Enumerating all shopping list items and adding all
            //unique tags to Shoppingist.Tags List
            foreach (ShoppingListItem item in this.ListItems)
            {
                foreach (string tag in item.Tags)
                {
                    if (!tags.Contains(tag))
                        tags.Add(tag);
                }
            }
            tags.Sort();
            //Adding an '[Empty]' string to list for displaying in Custom Filter List Control
            tags.Insert(0, "Tag [Empty]");
            bTags = true;
            this.Tags = tags;
        }

        public void UpdateListStoreLabels()
        {
            List<string> stores = new List<string>();

            foreach (ShoppingListStore store in this._listStores)
            {
                stores.Add(store.StoreName);
            }
            //Adding an '[Empty]' string to list for displaying in Custom Filter List Control
            stores.Insert(0, "Store [Empty]");

            this._storeLabels = stores;
        }

        /// <summary>
        /// Filter existing ListItems collection with corresponding application settings.
        /// If you filter your collection with this method - collection will be sorted automatically.
        /// To prevent doubling of sorting DON'T call SortItemsCollection method after it.
        /// </summary>
        public void FilterItemsCollection()
        {
            IEnumerable<ShoppingListItem> collection = new ObservableCollection<ShoppingListItem>();
            //Select all NOT picked items from list items collection
            if (App.Settings.HideCheckedItemsSettings)
                collection = from item in this.ListItems
                             where item.Status == 0
                             select item;
            else
                collection = from item in this.ListItems
                             where item.Status != 2
                             select item;

            //Filtering collection
            if (_filterTag != "Tag [Empty]")
                //Selecting list items that contains current tag
                collection = from item in collection
                             where item.Tags.Contains(this._filterTag)
                             select item;

            if (_filterStore != "Store [Empty]")
                //Selecting list items that contains current store
                collection = from item in collection
                             from item_store in item.ItemsStores
                             where item_store.Store.StoreName == this._filterStore
                             select item;

            this.bFiltered = true;
            this._sortedItemsCollection = collection;
            //If items collection has just filtered - it is necessary to sort this collection.
            //Sort items collection
            this.SortItemsCollection();
        }

        /// <summary>
        /// Sort existing ListItems collection with corresponding application settings
        /// </summary>
        public void SortItemsCollection()
        {
            //Collection of list items occur if current sort order does not match with
            //applicaion settings sort order (actually, after settings chenging)            
            IEnumerable<ShoppingListItem> collection = this._sortedItemsCollection;

            if (collection != null)
            {
                //Collection sorting
                switch (App.Settings.SortOrderSetting)
                {
                    case (int)ApplicationSettings.SortOrderSettings.Alphabetical:
                        collection = collection.OrderBy(i => i.ItemName);
                        break;
                    case (int)ApplicationSettings.SortOrderSettings.MostExpensiveFirst:
                        collection = collection.OrderBy(i => i, new MostExpensiveFirst());
                        break;
                    case (int)ApplicationSettings.SortOrderSettings.NewestFirst:
                        collection = collection.OrderBy(i => i, new NewestFirst());
                        break;
                    case (int)ApplicationSettings.SortOrderSettings.OldestFirst:
                        collection = collection.OrderBy(i => i.CreatedDate);
                        break;
                    case (int)ApplicationSettings.SortOrderSettings.Priority_TagsAlphabetical:
                        collection = collection.OrderBy(i => i, new Priority_TagsAlphabetical());
                        break;
                    case (int)ApplicationSettings.SortOrderSettings.TagsAlphabetical:
                        collection = collection.OrderBy(i => i.Tag);
                        break;
                    case (int)ApplicationSettings.SortOrderSettings.UncheckedFirst_Alphabetical:
                        collection = collection.OrderBy(i => i, new UncheckedFirst_Alphabetical());
                        break;
                    case (int)ApplicationSettings.SortOrderSettings.UncheckedFirst_Priority_Alphabetical:
                        collection = collection.OrderBy(i => i, new UncheckedFirst_Priority_Alphabetical());
                        break;
                    case (int)ApplicationSettings.SortOrderSettings.UncheckedFirst_TagsAlphabetical:
                        collection = collection.OrderBy(i => i, new UncheckedFirst_TagsAlphabetical());
                        break;
                    case (int)ApplicationSettings.SortOrderSettings.UnckeckedFirst_Priority_TagsAlphabetical:
                        collection = collection.OrderBy(i => i, new UnckeckedFirst_Priority_TagsAlphabetical());
                        break;
                    default:
                        break;
                }
                this.bSorted = true;
                this.SortedItemsCollection = collection;
            }
        }

        //Constructor of ShoppingList class
        public ShoppingList()
        {
            _listItems = new EntitySet<ShoppingListItem>();
            _listStores = new EntitySet<ShoppingListStore>();

            CheckedCount = 0;
            CheckedPrice = 0.0F;
            TotalPrice = 0.0F;
        }

        #region INotifyPropertyChanging members

        //Implementation for INotifyPropertyChanging interface
        public event PropertyChangingEventHandler PropertyChanging;
        private void NotifyPropertyChanging(String propertyName)
        {
            PropertyChangingEventHandler handler = PropertyChanging;
            if (null != handler)
            {
                handler(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanged members

        //Implementation for INotifyPropertyChanged interface
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }


    /// <summary>
    /// ShoppingListItem class for implementation database 'Items' table and here are also added
    /// fields (not saved in DB) for organisation data binding and application work
    /// </summary>
    /// <returns></returns>
    [Table(Name = "Items")]
    public sealed class ShoppingListItem : INotifyPropertyChanging, INotifyPropertyChanged
    {
        //List item ID private field
        private int _itemId;

        /// <summary>
        /// List item ID (automatically generated by database)
        /// </summary>
        [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
        public int ItemID
        {
            get { return this._itemId; }
            set
            {
                if (this._itemId != value)
                {
                    NotifyPropertyChanging("ItemID");
                    this._itemId = value;
                    NotifyPropertyChanged("ItemID");
                }
            }
        }

        //ID of corresponding list private field
        private int _listId;

        /// <summary>
        /// ID of corresponding list (where current item exist)
        /// </summary>
        [Column]
        public int ListID
        {
            get { return this._listId; }
            private set
            {
                if (this._listId != value)
                {
                    NotifyPropertyChanging("ListID");
                    this._listId = value;
                    NotifyPropertyChanged("ListID");
                }
            }
        }

        //Item name private field
        private string _itemName;

        /// <summary>
        /// Item name (string with maximum length = 100)
        /// </summary>
        [Column(DbType = "NVARCHAR(100)")]
        public string ItemName
        {
            get { return this._itemName; }
            set
            {
                if (this._itemName != value)
                {
                    NotifyPropertyChanging("ItemName");
                    this._itemName = value;
                    NotifyPropertyChanged("ItemName");
                }
            }
        }

        //Item status private field
        private int _status;

        /// <summary>
        /// Item status (Unchecked, Checked, Picked)
        /// </summary>
        [Column(DbType = "INT")]
        public int Status
        {
            get { return this._status; }
            set
            {
                if (this._status != value)
                {
                    NotifyPropertyChanging("Status");
                    this._status = value;
                    NotifyPropertyChanged("Status");

                    if (this.List != null)
                    {
                        //Updating list CheckedCount, CheckedPrice and TotalPrice fields
                        this.List.UpdatePrice();
                    }
                }
            }
        }

        //Item status enumeration
        public enum StatusEnumerator
        {
            Unchecked,
            Checked,
            Picked
        }

        //Item price private field
        private float _price;

        /// <summary>
        /// Item price
        /// </summary>
        //[Column(DbType = "FLOAT")]
        public float Price
        {
            get
            {
                if (App.Settings.TrackPerStorePricesSettings)
                {
                    UpdateItemPrice();
                    return this._price;
                }
                return this.ItemPrice;
            }
            set
            {
                if (this._price != value)
                {
                    NotifyPropertyChanging("Price");
                    this._price = value;
                    this.ItemPrice = value;
                    NotifyPropertyChanged("Price");

                    if (this.List != null)
                    {
                        //Updating list CheckedCount, CheckedPrice and TotalPrice fields
                        this.List.UpdatePrice();
                    }
                }
            }
        }

        [Column(DbType = "FLOAT")]
        private float ItemPrice { get; set; }

        //Item quantity private field
        private int? _quantity;

        /// <summary>
        /// Item quantity
        /// </summary>
        [Column(DbType = "INT", CanBeNull = true)]
        public int? Quantity
        {
            get { return this._quantity; }
            set
            {
                if (this._quantity != value)
                {
                    NotifyPropertyChanging("Quantity");
                    this._quantity = value;
                    NotifyPropertyChanged("Quantity");
                }
            }
        }

        //Item units private field
        private string _units;

        /// <summary>
        /// Item units (string with maximum length = 100 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(100)")]
        public string Units
        {
            get { return this._units; }
            set
            {
                if (this._units != value)
                {
                    NotifyPropertyChanging("Units");
                    this._units = value;
                    NotifyPropertyChanged("Units");
                }
            }
        }

        //Item priority private field
        private int? _priority;

        /// <summary>
        /// Item priority
        /// </summary>
        [Column(DbType = "INT", CanBeNull = true)]
        public int? Priority
        {
            get { return this._priority; }
            set
            {
                if (this._priority != value)
                {
                    NotifyPropertyChanging("Priority");
                    this._priority = value;
                    NotifyPropertyChanged("Priority");
                }
            }
        }

        //Item tags private field
        private string _tag;

        /// <summary>
        /// Item tags (string with maximum length = 300 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(300)")]
        public string Tag
        {
            get { return this._tag; }
            set
            {
                if (this._tag != value)
                {
                    NotifyPropertyChanging("Tag");
                    this._tag = value;

                    //If item Tag property was chnaged -> update list
                    //of parsed unique item tags
                    List<string> tags = new List<string>();
                    string[] tags_array = this.Tag.Split(',');
                    foreach (string tag in tags_array)
                    {
                        if (tag.Trim() != string.Empty)
                            tags.Add(tag.Trim());
                    }
                    this.Tags = tags;

                    NotifyPropertyChanged("Tag");
                }
            }
        }

        //Item note private field
        private string _note;

        /// <summary>
        /// Item note (string with maximum length = 1000 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(1000)")]
        public string Note
        {
            get { return this._note; }
            set
            {
                if (this._note != value)
                {
                    NotifyPropertyChanging("Note");
                    this._note = value;
                    NotifyPropertyChanged("Note");
                }
            }
        }

        //Item created date private field
        private DateTime _createdDate;

        /// <summary>
        /// Item created date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime CreatedDate
        {
            get { return this._createdDate; }
            set
            {
                if (this._createdDate != value)
                {
                    NotifyPropertyChanging("CreatedDate");
                    this._createdDate = value;
                    NotifyPropertyChanged("CreatedDate");
                }
            }
        }

        //Item last modified date private field
        private DateTime _modifiedDate;

        /// <summary>
        /// Item last modified date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime ModifiedDate
        {
            get { return this._modifiedDate; }
            set
            {
                if (this._modifiedDate != value)
                {
                    NotifyPropertyChanging("ModifiedDate");
                    this._modifiedDate = value;
                    NotifyPropertyChanged("ModifiedDate");
                }
            }
        }

        private List<string> _Tags;

        /// <summary>
        /// List of parsed unique item tags
        /// </summary>
        public List<string> Tags
        {
            get { return this._Tags; }
            set
            {
                NotifyPropertyChanging("Tags");
                this._Tags = value;

                if (this.List != null)
                {
                    //When the list of parsed unique item tags was seted
                    // -> update shopping list (the owner of current item) unique tags
                    this.List.UpdateListTags();
                }

                NotifyPropertyChanged("Tags");
            }
        }

        //Private entity ref for corresponding list
        private EntityRef<ShoppingList> _list;

        /// <summary>
        /// Corresponding list entity ref. List items associated with list in one-to-many relationship
        /// </summary>
        [Association(Storage = "_list", ThisKey = "ListID", OtherKey = "ListID", IsForeignKey = true, DeleteRule = "CASCADE")]
        public ShoppingList List
        {
            get { return _list.Entity; }
            set
            {
                this._list.Entity = value;
                if (value != null)
                {
                    NotifyPropertyChanging("ListID");
                    this._listId = value.ListID;
                    NotifyPropertyChanged("ListID");
                }
            }
        }

        //Item-stores entity set private field
        private EntitySet<ShoppingListItemsStores> _itemsStores;

        /// <summary>
        /// Item-stores entity set. Items associated with stores in many-to-meny relationship
        /// - one store can contain zero or more list items;
        /// - one item can locate in zero or more stores.
        /// </summary>
        [Association(Storage = "_itemsStores", OtherKey = "ItemID", ThisKey = "ItemID", DeleteRule = "CASCADE")]
        public EntitySet<ShoppingListItemsStores> ItemsStores
        {
            get { return this._itemsStores; }
            set { this._itemsStores.Assign(value); }
        }

        /// <summary>
        /// Method for updating item price
        /// </summary>
        private void UpdateItemPrice()
        {
            if (this._itemsStores != null && this._itemsStores.Count > 0)
            {
                IEnumerable<float> prices = from store in this._itemsStores
                                            select store.StorePrice;
                float minPrice = prices.FirstOrDefault();
                foreach (float price in prices)
                {
                    if (price < minPrice)
                        minPrice = price;
                }
                this._price = minPrice;
            }
            else
                this._price = 0.00F;
        }

        /// <summary>
        /// Method for updating item price binding targets
        /// </summary>
        public void UpdateItemPriceBindingTargets()
        {
            NotifyPropertyChanged("Price");
        }

        public ShoppingListItem()
        {
            _itemsStores = new EntitySet<ShoppingListItemsStores>();
        }

        #region INotifyPropertyChanging members

        //Implementation for INotifyPropertyChanging interface
        public event PropertyChangingEventHandler PropertyChanging;
        private void NotifyPropertyChanging(String propertyName)
        {
            PropertyChangingEventHandler handler = PropertyChanging;
            if (null != handler)
            {
                handler(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanged members

        //Implementation for INotifyPropertyChanged interface
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }


    /// <summary>
    /// ShoppingListItem class for implementation database 'Stores' table
    /// </summary>
    /// <returns></returns>
    [Table(Name = "Stores")]
    public sealed class ShoppingListStore : INotifyPropertyChanging, INotifyPropertyChanged
    {
        //List store ID private field
        private int _storeId;

        /// <summary>
        /// List store ID (automatically generated by database)
        /// </summary>
        [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
        public int StoreID
        {
            get { return this._storeId; }
            set
            {
                if (this._storeId != value)
                {
                    NotifyPropertyChanging("StoreID");
                    this._storeId = value;
                    NotifyPropertyChanged("StoreID");
                }
            }
        }

        //ID of corresponding shopping list
        private int _listId;

        /// <summary>
        /// ID of corresponding shopping list
        /// </summary>
        [Column]
        public int ListID
        {
            get { return this._listId; }
            private set
            {
                if (this._listId != value)
                {
                    NotifyPropertyChanging("ListID");
                    this._listId = value;
                    NotifyPropertyChanged("ListID");
                }
            }
        }

        //Store name private field
        private string _storeName;

        /// <summary>
        /// Store name (string with maximum length = 100 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(100)")]
        public string StoreName
        {
            get { return this._storeName; }
            set
            {
                if (this._storeName != value)
                {
                    NotifyPropertyChanging("StoreName");
                    this._storeName = value;
                    NotifyPropertyChanged("StoreName");
                }
            }
        }

        //Store created date private field
        private DateTime _createdDate;

        /// <summary>
        /// Store created date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime CreatedDate
        {
            get { return this._createdDate; }
            set
            {
                if (this._createdDate != value)
                {
                    NotifyPropertyChanging("CreatedDate");
                    this._createdDate = value;
                    NotifyPropertyChanged("CreatedDate");
                }
            }
        }

        //Store last modified date private field
        private DateTime _modifiedDate;

        /// <summary>
        /// Store last modified date
        /// </summary>
        [Column(DbType = "DATETIME")]
        public DateTime ModifiedDate
        {
            get { return this._modifiedDate; }
            set
            {
                if (this._modifiedDate != value)
                {
                    NotifyPropertyChanging("ModifiedDate");
                    this._modifiedDate = value;
                    NotifyPropertyChanged("ModifiedDate");
                }
            }
        }

        //Private entity ref for corresponding list        
        private EntityRef<ShoppingList> _list;

        //Corresponding list entity ref. List stores associated with list in one-to-many relationship
        [Association(Storage = "_list", ThisKey = "ListID", OtherKey = "ListID", IsForeignKey = true, DeleteRule = "CASCADE")]
        public ShoppingList List
        {
            get { return _list.Entity; }
            set
            {
                this._list.Entity = value;
                if (value != null)
                    this._listId = value.ListID;
            }
        }

        //Store-items entity set private field
        private EntitySet<ShoppingListItemsStores> _storesItems;

        /// <summary>
        /// Store-items entity set. Stores associated with items in many-to-meny relationship
        /// - one store can contain zero or more list items;
        /// - one item can locate in zero or more stores.
        /// </summary>
        [Association(Storage = "_storesItems", OtherKey = "StoreID", ThisKey = "StoreID", DeleteRule = "CASCADE")]
        public EntitySet<ShoppingListItemsStores> StoresItems
        {
            get { return this._storesItems; }
            set { this._storesItems.Assign(value); }
        }

        public ShoppingListStore()
        {
            _storesItems = new EntitySet<ShoppingListItemsStores>();
        }

        #region INotifyPropertyChanging members

        //Implementation for INotifyPropertyChanging interface
        public event PropertyChangingEventHandler PropertyChanging;
        private void NotifyPropertyChanging(String propertyName)
        {
            PropertyChangingEventHandler handler = PropertyChanging;
            if (null != handler)
            {
                handler(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanged members

        //Implementation for INotifyPropertyChanged interface
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }


    /// <summary>
    /// ShoppingListItemsStores database table class (for implementation many-to-many relationship).
    /// Each ListItem can be copied many times to ItemsStores; each ListStore can be copied many times to ItemsStores.
    /// </summary>
    /// <returns></returns>
    [Table(Name = "ItemsStores")]
    public sealed class ShoppingListItemsStores : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private int _Id;

        [Column(IsPrimaryKey = true, IsDbGenerated = true, CanBeNull = false, DbType = "INT NOT NULL Identity", AutoSync = AutoSync.OnInsert)]
        public int ID
        {
            get { return this._Id; }
            set
            {
                if (this._Id != value)
                {
                    NotifyPropertyChanging("ItemsStoresID");
                    this._Id = value;
                    NotifyPropertyChanged("ItemsStoresID");
                }
            }
        }

        private int _itemId;

        [Column]
        public int ItemID
        {
            get { return this._itemId; }
            set
            {
                if (this._itemId != value)
                {
                    NotifyPropertyChanging("ItemID");
                    this._itemId = value;
                    NotifyPropertyChanged("ItemID");
                }
            }
        }

        private int _storeId;

        [Column]
        public int StoreID
        {
            get { return this._storeId; }
            set
            {
                if (this._storeId != value)
                {
                    NotifyPropertyChanging("StoreID");
                    this._storeId = value;
                    NotifyPropertyChanged("StoreID");
                }
            }
        }

        //Item per-store price private field
        private float _storePrice;

        /// <summary>
        /// Item price
        /// </summary>
        [Column(DbType = "FLOAT")]
        public float StorePrice
        {
            get { return this._storePrice; }
            set
            {
                if (this._storePrice != value)
                {
                    NotifyPropertyChanging("StorePrice");
                    this._storePrice = value;
                    NotifyPropertyChanged("StorePrice");
                }
            }
        }

        //Item units private field
        private string _aisle;

        /// <summary>
        /// Item units (string with maximum length = 100 characters)
        /// </summary>
        [Column(DbType = "NVARCHAR(100)")]
        public string Aisle
        {
            get { return this._aisle; }
            set
            {
                if (this._aisle != value)
                {
                    NotifyPropertyChanging("Aisle");
                    this._aisle = value;
                    NotifyPropertyChanged("Aisle");
                }
            }
        }

        private EntityRef<ShoppingListItem> _item;

        [Association(Name = "FK_ItemsStores_List", Storage = "_item", ThisKey = "ItemID", OtherKey = "ItemID", IsForeignKey = true, DeleteRule = "CASCADE")]
        public ShoppingListItem ListItem
        {
            get { return this._item.Entity; }
            set
            {
                this._item.Entity = value;
                if (value != null)
                    this._itemId = value.ItemID;
            }
        }

        private EntityRef<ShoppingListStore> _store;

        [Association(Name = "FK_StoresItems_List", Storage = "_store", ThisKey = "StoreID", OtherKey = "StoreID", IsForeignKey = true, DeleteRule = "CASCADE")]
        public ShoppingListStore Store
        {
            get { return _store.Entity; }
            set
            {
                this._store.Entity = value;
                if (value != null)
                    this._storeId = value.StoreID;
            }
        }

        #region INotifyPropertyChanging members

        //Implementation for INotifyPropertyChanging interface
        public event PropertyChangingEventHandler PropertyChanging;
        private void NotifyPropertyChanging(String propertyName)
        {
            PropertyChangingEventHandler handler = PropertyChanging;
            if (null != handler)
            {
                handler(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        #endregion

        #region INotifyPropertyChanged members

        //Implementation for INotifyPropertyChanged interface
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }
}
